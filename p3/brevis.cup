/**********************************************************************
 Java CUP specification for a parser for brevis programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                BOOL;
terminal                INT;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                RECORD;
terminal                SCAN;
terminal                PRINT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                ASSIGN;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;



/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal RecordDeclNode   recordDecl;
non terminal List<DeclNode>   recordBody;
non terminal FnDeclNode       fnDecl;
non terminal List<FormalDeclNode>   formals;
non terminal FnBodyNode       fnBody;
non terminal List<DeclNode>   varDeclList;
non terminal List<StmtNode>   stmtList;
non terminal ExpNode          exp;
non terminal ExpNode          term;
non terminal ExpNode          loc;
non terminal AssignExpNode    assignExp;
non terminal StmtNode         stmt;
non terminal CallExpNode      fncall;
non terminal List<ExpNode>    actualList;


/* NOTE: Add precedence and associativity declarations here */

precedence left TIMES, DIVIDE;
precedence left PLUS, MINUS;
precedence nonassoc EQUALS, NOTEQUALS, LESS, LESSEQ, GREATER, GREATEREQ;
precedence left AND;
precedence left OR;
precedence right ASSIGN;


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                |   recordDecl:r
                {:  RESULT = r;
                :}
                |   fnDecl:f
                {:  RESULT = f;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NON_RECORD);
                :}
                ;

type            ::= BOOL
                {: RESULT = new BoolNode();
                :}
                |   INT
                {: RESULT = new IntNode();
                :}
                |   VOID
                {: RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;

recordBody      ::= recordBody:r varDecl:v
                {:
                    r.add(v);
                    RESULT = r;
                :}

                |   varDecl:v
                {:  List<DeclNode> s = new LinkedList<>();
                    s.add(v);
                    RESULT = s;
                :}
                ;
				
recordDecl      ::= RECORD id:i LPAREN recordBody:b RPAREN SEMICOLON
                {:  DeclListNode n = new DeclListNode(b);
                    RESULT = new RecordDeclNode(i, n);
                :}
                ;

fnDecl          ::= type:t id:i formals:f fnBody:b
                {:  FormalsListNode n = new FormalsListNode(f);
                    RESULT = new FnDeclNode(t, i, n, b);
                :}
                ;

formals         ::= LPAREN RPAREN
                {: RESULT = new LinkedList<FormalDeclNode>();
                :}
                ;

fnBody          ::= LCURLY varDeclList:v stmtList:s RCURLY
                {:  DeclListNode vn = new DeclListNode(v);
                    StmtListNode sn = new StmtListNode(s);
                    RESULT = new FnBodyNode(vn, sn);
                :}
                ;

varDeclList     ::= /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                |   varDeclList:vl varDecl:v
                {:  vl.add(v);
                    RESULT = vl;
                :}
                ;

stmtList        ::= /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                |   stmtList:sl stmt:s
                {:  sl.add(s);
                    RESULT = sl;
                :}
                ;

exp             ::= term:t
                {: RESULT = t; 
                :}
                |   assignExp:a
                {: RESULT = a;
                :}
                |   exp:e1 PLUS exp:e2
                {: RESULT = new PlusNode(e1, e2);
                :}
                |   exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1, e2);
                :}
                |   exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1, e2);
                :}
                |   exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1, e2);
                :}
                |   exp:e1 EQUALS exp:e2
                {: RESULT = new EqualsNode(e1, e2);
                :}
                |   exp:e1 NOTEQUALS exp:e2
                {: RESULT = new NotEqualsNode(e1, e2);
                :}
                |   exp:e1 LESS exp:e2
                {: RESULT = new LessNode(e1, e2);
                :}
                |   exp:e1 LESSEQ exp:e2
                {: RESULT = new LessEqNode(e1, e2);
                :}
                |   exp:e1 GREATER exp:e2
                {: RESULT = new GreaterNode(e1, e2);
                :}
                |   exp:e1 GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e1, e2);
                :}
                |   exp:e1 AND exp:e2
                {: RESULT = new AndNode(e1, e2);
                :}
                |   exp:e1 OR exp:e2
                {: RESULT = new OrNode(e1, e2);
                :}
                |   NOT exp:e
                {:  RESULT = new NotNode(e);
                :}
                |   MINUS exp:e
                {:  RESULT = new UnaryMinusNode(e);
                :}
                ;

term            ::= loc:l
                {: RESULT = l;
                :}
                |   TRUE:i
                {:  RESULT = new TrueNode(i.lineNum, i.charNum);
                :}
                |   FALSE:i
                {:  RESULT = new FalseNode(i.lineNum, i.charNum);
                :}
                |   INTLITERAL:i
                {: RESULT = new IntLitNode(i.lineNum, i.charNum, i.intVal);
                :}
                |   STRINGLITERAL:i
                {:  RESULT = new StringLitNode(i.lineNum, i.charNum, i.strVal);
                :}
                |   LPAREN exp:e RPAREN
                {:  RESULT = e;
                :}
                | fncall:f
                {:  RESULT = f;
                :}
                ;

loc             ::= id:i
                {: RESULT = i;
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:e
                {: RESULT = new AssignExpNode(l, e);
                :}
                ;

stmt            ::= assignExp:a SEMICOLON
                {: RESULT = new AssignStmtNode(a);
                :}
                |   loc:l PLUSPLUS SEMICOLON
                {:  RESULT = new PostIncStmtNode(l);
                :}
                |   loc:l MINUSMINUS SEMICOLON
                {:  RESULT = new PostDecStmtNode(l);
                :}
                |   IF LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY
                {:  DeclListNode vn = new DeclListNode(v);
                    StmtListNode sn = new StmtListNode(s);
                    RESULT = new IfStmtNode(e, vn, sn);
                :}
                |   IF LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY ELSE LCURLY varDeclList:ve stmtList:se RCURLY
                {:  DeclListNode vn = new DeclListNode(v);
                    StmtListNode sn = new StmtListNode(s);
                    DeclListNode ven = new DeclListNode(ve);
                    StmtListNode sen = new StmtListNode(se);
                    RESULT = new IfElseStmtNode(e, vn, sn, ven, sen);
                :}
                |   WHILE LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY
                {:  DeclListNode vn = new DeclListNode(v);
                    StmtListNode sn = new StmtListNode(s);
                    RESULT = new WhileStmtNode(e, vn, sn);
                :}
                |   SCAN READ loc:l SEMICOLON
                {:  RESULT = new ReadStmtNode(l);
                :}
                |   PRINT WRITE exp:e SEMICOLON
                {:  RESULT = new WriteStmtNode(e);
                :}
                |   fncall:f SEMICOLON
                {:  RESULT = new CallStmtNode(f);
                :}
                |   RETURN exp:e SEMICOLON
                {:  RESULT = new ReturnStmtNode(e);
                :}
                |   RETURN SEMICOLON
                {:  RESULT = new ReturnStmtNode(null);
                :}
                ;

fncall          ::= id:i LPAREN RPAREN
                {:  RESULT = new CallExpNode(i);
                :}
                |   id:i LPAREN actualList:a RPAREN
                {:  ExpListNode an = new ExpListNode(a);
                    RESULT = new CallExpNode(i, an);
                :}
                ;

actualList      ::= exp:e
                {: List<ExpNode> s = new LinkedList<>();
                    s.add(e);
                    RESULT = s; 
                :}
                |   actualList:a COMMA exp:e
                {:  a.add(e);
                    RESULT = a;
                :}
                ;
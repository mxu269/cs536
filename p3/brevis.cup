/**********************************************************************
 Java CUP specification for a parser for brevis programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                BOOL;
terminal                INT;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                RECORD;
terminal                SCAN;
terminal                PRINT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                ASSIGN;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;



/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal RecordDeclNode   recordDecl;
non terminal List<DeclNode>   recordBody;
non terminal FnDeclNode       fnDecl;
non terminal List<FormalDeclNode>   formals;
non terminal FnBodyNode       fnBody;
non terminal List<DeclNode>   varDeclList;
non terminal List<StmtNode>   stmtList;
/* NOTE: Add precedence and associativity declarations here */


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                |   recordDecl:r
                {:  RESULT = r;
                :}
                |   fnDecl:f
                {:  RESULT = f;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NON_RECORD);
                :}
                ;

type            ::= BOOL
                {: RESULT = new BoolNode();
                :}
                |   INT
                {: RESULT = new IntNode();
                :}
                |   VOID
                {: RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;

recordBody      ::= recordBody:r varDecl:v
                {:
                    r.add(v);
                    RESULT = r;
                :}

                |   varDecl:v
                {:  List<DeclNode> s = new LinkedList<>();
                    s.add(v);
                    RESULT = s;
                :}
                ;
				
recordDecl      ::= RECORD id:i LPAREN recordBody:b RPAREN SEMICOLON
                {:  DeclListNode n = new DeclListNode(b);
                    RESULT = new RecordDeclNode(i, n);
                :}
                ;

fnDecl          ::= type:t id:i formals:f fnBody:b
                {:  FormalsListNode n = new FormalsListNode(f);
                    RESULT = new FnDeclNode(t, i, n, b);
                :}
                ;

formals         ::= LPAREN RPAREN
                {: RESULT = new LinkedList<FormalDeclNode>();
                :}
                ;

fnBody          ::= LCURLY varDeclList:v stmtList:s RCURLY
                {:  DeclListNode vn = new DeclListNode(v);
                    StmtListNode sn = new StmtListNode(s);
                    RESULT = new FnBodyNode(vn, sn);
                :}
                ;

varDeclList     ::= /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

stmtList        ::= /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;